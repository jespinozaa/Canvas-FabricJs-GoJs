@model GoJS.Models.Nodo

@{
    ViewBag.Title = "dragdrop";
}

<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Graphical Macros via Auto Ungrouping</title>
<meta name="description" content="Automatically start editing dropped nodes and ungroup dropped groups to create subgraphs." />
<!-- Copyright 1998-2017 by Northwoods Software Corporation. -->
<meta charset="UTF-8">
<script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.min.js"></script>
 <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/1.7.7/go-debug.js"></script>

   <style>
     .modal-content {
         width: 600px !important;
         margin: 30px auto !important;
     }
 </style>
<script id="code" type="text/javascript">
    var arregloNodos = [];
    var arregloTuberias = [];
    //Obtiene lista de Nodos
    $(function () {
        $(document).ready(function () {
            $.ajax({
                type: "POST",
                url: "/Home/ObtenerNodos",
                data: '{Id: "' + @ViewBag.Id+ '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    $.each(response, function (i) {
                        arregloNodos.push({ key: response[i].IdNodo, source: response[i].Imagen, loc: "" + response[i].X + " " + response[i].Y + "" });
                    });
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });

    //Obtiene lista de tuberias
    $(function () {
        $(document).ready(function () {
            $.ajax({
                type: "POST",
                url: "/Home/ObtenerTuberias",
                data: '{Id: "' + @ViewBag.Id + '" }',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    $.each(data, function (i) {
                       
                            arregloTuberias.push({ from: data[i].IdNodo1, to: data[i].IdNodo2, text: data[0].TipoConduccion});
                        
                    });  
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });
  


    function init() {
        var nodoInicial;
        var nodoFinal;

        var $$ = go.GraphObject.make;  // for conciseness in defining templates

        myDiagram =
          $$(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
            {
                allowDrop: true,   // must be true to accept drops from the Palette
                // automatically show the state of the diagram's model on the page in a <PRE> element
                "ModelChanged": function (e) {
                    if (e.isTransactionFinished) {
                        document.getElementById("mySavedModel").textContent = myDiagram.model.toJson();
                    }
                },
                "undoManager.isEnabled": true
            });
        // define the Node template for regular nodes

        myDiagram.nodeTemplateMap.add("",
          $$(go.Node, go.Panel.Auto,
            new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),

            $$(go.Shape,
              { figure: "Rectangle", fill: "white", strokeWidth: 1, stroke: "white" },
             new go.Binding("stroke", "fill"),
            { portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer" }),

         $$(go.Picture,
        {
            width: 40, height: 50, margin: 2,
            imageStretch: go.GraphObject.Fill
        },
        new go.Binding("source")

        )));


        myDiagram.linkTemplate =
          $$(go.Link,
            //{ curve: go.Link.Bezier },
           $$(go.Shape, { strokeWidth: 2, stroke: "green" }),
            $$(go.Shape, { toArrow: "OpenTriangle", stroke: "green" }),
             $$(go.TextBlock,
                {
                    height: 33
                },
                new go.Binding("text")
            ));

        // initialize the Palette that is on the left side of the page
        myPalette =
          $$(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
            {
                nodeTemplateMap: myDiagram.nodeTemplateMap,
                groupTemplateMap: myDiagram.groupTemplateMap
            });



        myPalette.model = new go.GraphLinksModel([
          // a regular node
            { key: "A", source: "/Images/PlantaElevadora.png" },
            { key: "B", source: "/Images/SectorConsumo.png" },
            { key: "C", source: "/Images/Estanque.png" },
            { key: "D", source: "/Images/Fuente.png" },
            { key: "E", source: "/Images/Nodo.png" },
            { key: "F", source: "/Images/PlantaTratamiento.png" }
        ]);

        myDiagram.model = new go.GraphLinksModel(arregloNodos, arregloTuberias);
        //   EVENTOS CLICK
        myDiagram.addDiagramListener("ObjectDoubleClicked", function (e) {
            $(function () {
                var options = { "backdrop": "static", keyboard: true };
                $.ajax({
                    type: "POST",
                    url: "/Home/CargarNodo",
                    data: '{idNodo: "' + e.subject.part.data.key + '" , idSistema: "'+ @ViewBag.Id +'" }',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        $.each(response, function (i) {
                            console.log(response[i]);
                            $('#LoadNode').context = response;
                            //var part = e.subject.part;
                        });
                
                            //arregloNodos.push({ key: response[i].IdNodo, source: response[i].Imagen, loc: "" + response[i].X + " " + response[i].Y + "" });
                        },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });

            });
        });
    };
            
  
</script>
</head>
<body onload="setTimeout('init()',1000);">
   
<div id="sample">
  <div style="width:100%;">
    <span style="display: inline-block; vertical-align: top; width:80%">
      <div id="myPaletteDiv" style="border: solid 1px black; height: 100px; width:500px" ></div>
    </span>
    <span style="display: inline-block; vertical-align: top; width:100%">
      <div id="myDiagramDiv" style="border: solid 1px black; height: 500px"></div>
    </span>
<div id="LoadNode">  
</div>
  </div>

 Formato Json:
  <br />
    <div>
  <pre id="mySavedModel" style="width:100%;height:300px">
</div>
  </pre>
</div>
</body>
</html>